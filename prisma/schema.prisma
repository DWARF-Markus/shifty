generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                           Int                            @id @default(autoincrement())
  name                         String
  createdAt                    DateTime                       @default(now())
  email                        String                         @unique
  password                     String
  days                         String
  profileImage                 String
  CompanyEmployeeNotifications CompanyEmployeeNotifications[]
  Shift                        CompanyShift[]
  CompanySize                  CompanySize[]
  CompanyType                  CompanyType[]
  Employee                     Employee[]
}

model CompanyType {
  id        Int      @id @default(autoincrement())
  companyId Int?
  type      String
  Company   Company? @relation(fields: [companyId], references: [id])
}

model CompanySize {
  id        Int      @id @default(autoincrement())
  companyId Int?
  size      String
  Company   Company? @relation(fields: [companyId], references: [id])
}

model Employee {
  id                           Int                            @id @default(autoincrement())
  firstName                    String
  lastName                     String
  email                        String                         @unique
  password                     String
  profileImage                 String
  acceptedCompany              Boolean                        @default(false)
  acceptedCompanyDateTime      DateTime?
  companyId                    Int?
  companyForeign               Company?                       @relation(fields: [companyId], references: [id])
  CompanyEmployeeNotifications CompanyEmployeeNotifications[]
  CompanyShiftEmployee         CompanyShiftEmployee[]
  EmployeeVacation             EmployeeVacation[]
}

model EmployeeVacation {
  id         Int       @id @default(autoincrement())
  employeeId Int?
  dateStart  DateTime
  dateEnd    DateTime
  approved   Boolean   @default(false)
  Employee   Employee? @relation(fields: [employeeId], references: [id])
}

model CompanyShift {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  companyId            Int?
  title                String
  extraWage            Int?
  employeeAmount       Int
  startTime            DateTime
  endTime              DateTime
  Company              Company?               @relation(fields: [companyId], references: [id])
  CompanyShiftEmployee CompanyShiftEmployee[]
}

model CompanyShiftEmployee {
  id             Int           @id @default(autoincrement())
  employeeId     Int?
  companyShiftId Int?
  CompanyShift   CompanyShift? @relation(fields: [companyShiftId], references: [id])
  Employees      Employee?     @relation(fields: [employeeId], references: [id])
}

model CompanyEmployeeNotifications {
  id              Int       @id @default(autoincrement())
  employeeId      Int?
  companyId       Int?
  adminMessage    String
  employeeMessage String
  adminActive     Boolean   @default(true)
  EmployeeActive  Boolean   @default(true)
  timestamp       DateTime  @default(now())
  companyForeign  Company?  @relation(fields: [companyId], references: [id])
  Employee        Employee? @relation(fields: [employeeId], references: [id])
}
